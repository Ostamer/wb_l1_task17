package main

import "fmt"

// Функция бинарного поиска
func binarySearch(arr []int, target int) int {
	low, high := 0, len(arr)-1

	// Проводим поиск до тех пор, пока не сузим область поиска до одного элемента
	for low <= high {
		mid := low + (high-low)/2 // Индекс среднего элемента

		// Если элемент найден
		if arr[mid] == target {
			return mid
		}

		// Если искомое число меньше среднего элемента, ищем в левой половине
		if arr[mid] > target {
			high = mid - 1
		} else {
			// Если искомое число больше среднего элемента, ищем в правой половине
			low = mid + 1
		}
	}

	// Если элемент не найден
	return -1
}

// Бинарный поиск создан для нахождения числа в отсортированном списке чисел,
// Суть алгоритма заключается в следующем, мы начинаем искать с середины списка и проверяем является ли выбранный элемент искомым, есть 3 сценария
// 1) Если число больше то берем подмассив от индекса выбранного элемента до верхней границы
// 2) Если число меньше то берем подмассив от индекса выбранного элемента до нижней границы
// 3) Если число равно то возвращаем
// Алогритмеская сложность O(log(n))

func main() {
	arr := []int{1, 3, 5, 7, 9, 11, 13, 15, 17, 19}
	target := 7

	result := binarySearch(arr, target)
	if result != -1 {
		fmt.Printf("Элемент найден на индексе %d\n", result)
	} else {
		fmt.Println("Элемент не найден")
	}
}
